generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Municipality {
  id               String        @id @default(cuid())
  name             String        @unique
  code             String?       @unique
  county           String?
  region           String?
  latitude         Float?
  longitude        Float?
  population       Int?
  homepage         String?       @db.Text
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  platform         String?
  province         String?
  registerStatus   String?
  registerUrl      String?       @db.Text
  registryEndpoint String?       @db.Text
  countyCode       String?
  associations     Association[]
  importBatches    ImportBatch[]
  scrapeRuns       ScrapeRun[]

  @@index([county])
  @@index([province])
  @@index([platform])
  @@index([registerStatus])
  @@index([region])
}

model Association {
  id                  String               @id @default(cuid())
  sourceSystem        String
  municipalityId      String?
  municipality        String?
  scrapeRunId         String?
  scrapedAt           DateTime
  detailUrl           String?
  name                String
  orgNumber           String?
  types               Json
  activities          Json
  categories          Json
  homepageUrl         String?
  streetAddress       String?
  postalCode          String?
  city                String?
  email               String?              @db.Text
  phone               String?
  description         Json?
  descriptionFreeText String?              @db.Text
  crmStatus           CrmStatus            @default(UNCONTACTED)
  isMember            Boolean              @default(false)
  memberSince         DateTime?
  pipeline            Pipeline             @default(PROSPECT)
  assignedToId        String?
  listPageIndex       Int?
  positionOnPage      Int?
  paginationModel     String?
  filterState         Json?
  extras              Json?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  importBatchId       String?
  deletedAt           DateTime?
  isDeleted           Boolean              @default(false)

  assignedTo          User?                @relation("Association_assignedTo", fields: [assignedToId], references: [id], onDelete: SetNull)
  importBatch         ImportBatch?         @relation(fields: [importBatchId], references: [id])
  municipalityRecord  Municipality?        @relation(fields: [municipalityId], references: [id])
  scrapeRun           ScrapeRun?           @relation(fields: [scrapeRunId], references: [id])
  activityLog         Activity[]
  contacts            Contact[]
  descriptionSections DescriptionSection[]
  groupMemberships    GroupMembership[]
  notes               Note[]
  tags                Tag[]                @relation("AssociationTags")
  tasks               Task[]

  @@index([municipality])
  @@index([municipalityId])
  @@index([municipalityId, scrapedAt])
  @@index([crmStatus, pipeline])
  @@index([importBatchId])
  @@index([scrapeRunId])
  @@index([isDeleted])
  @@fulltext([name, city])
}

model Contact {
  id            String      @id @default(cuid())
  associationId String
  name          String?
  role          String?
  email         String?
  phone         String?
  mobile        String?
  linkedinUrl   String?
  facebookUrl   String?
  twitterUrl    String?
  instagramUrl  String?
  isPrimary     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  association   Association @relation(fields: [associationId], references: [id], onDelete: Cascade)

  @@index([associationId])
  @@index([email])
}

model DescriptionSection {
  id            String      @id @default(cuid())
  associationId String
  title         String?
  data          Json?
  orderIndex    Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  association   Association @relation(fields: [associationId], references: [id], onDelete: Cascade)

  @@index([associationId])
}

model Note {
  id            String      @id @default(cuid())
  associationId String
  content       String      @db.Text
  tags          Json
  authorId      String
  authorName    String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  association   Association @relation(fields: [associationId], references: [id], onDelete: Cascade)
  author        User        @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([associationId, createdAt])
}

model Tag {
  id           String        @id @default(cuid())
  name         String        @unique
  color        String        @default("#3b82f6")
  createdAt    DateTime      @default(now())
  associations Association[] @relation("AssociationTags")
}

model Group {
  id            String            @id @default(cuid())
  name          String
  description   String?           @db.Text
  searchQuery   Json?
  autoUpdate    Boolean           @default(false)
  createdById   String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  createdBy     User              @relation(fields: [createdById], references: [id], onDelete: Cascade)
  memberships   GroupMembership[]
}

model GroupMembership {
  id            String      @id @default(cuid())
  groupId       String
  associationId String
  addedAt       DateTime    @default(now())

  association   Association @relation(fields: [associationId], references: [id], onDelete: Cascade)
  group         Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, associationId])
  @@index([associationId])
}

model Activity {
  id            String       @id @default(cuid())
  associationId String?
  type          ActivityType
  description   String
  metadata      Json?
  userId        String
  userName      String
  createdAt     DateTime     @default(now())

  association   Association? @relation(fields: [associationId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([associationId, createdAt])
  @@index([userId, createdAt])
}

model Task {
  id            String       @id @default(cuid())
  title         String
  description   String?
  dueDate       DateTime?
  status        TaskStatus   @default(OPEN)
  priority      TaskPriority @default(MEDIUM)
  associationId String?
  assignedToId  String?
  createdById   String
  completedAt   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  association   Association? @relation(fields: [associationId], references: [id], onDelete: Cascade)
  assignedTo    User?        @relation("TaskAssignedTo", fields: [assignedToId], references: [id], onDelete: SetNull)
  createdBy     User         @relation("TaskCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)

  @@index([status, dueDate])
  @@index([assignedToId, status])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          UserRole      @default(USER)
  passwordHash  String?
  deletedAt     DateTime?
  isDeleted     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  accounts      Account[]
  sessions      Session[]
  notes         Note[]
  activities    Activity[]
  createdGroups Group[]
  associations  Association[] @relation("Association_assignedTo")
  createdTasks  Task[]        @relation("TaskCreatedBy")
  assignedTasks Task[]        @relation("TaskAssignedTo")

  @@index([isDeleted])
  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ScrapeRun {
  id             String        @id @default(cuid())
  status         String
  startedAt      DateTime
  completedAt    DateTime?
  totalFound     Int?
  totalProcessed Int?
  errors         Json?
  municipalityId String

  associations   Association[]
  municipality   Municipality  @relation(fields: [municipalityId], references: [id])

  @@index([municipalityId, startedAt])
}

model ImportBatch {
  id             String        @id @default(cuid())
  municipalityId String
  fileName       String
  fileCount      Int           @default(1)
  totalRecords   Int           @default(0)
  importedCount  Int           @default(0)
  updatedCount   Int           @default(0)
  skippedCount   Int           @default(0)
  errorCount     Int           @default(0)
  deletedCount   Int           @default(0)
  status         String
  importMode     String
  errors         Json?
  importedBy     String
  importedByName String
  createdAt      DateTime      @default(now())
  completedAt    DateTime?

  associations   Association[]
  municipality   Municipality  @relation(fields: [municipalityId], references: [id])

  @@index([municipalityId, createdAt])
  @@index([status])
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum CrmStatus {
  UNCONTACTED
  CONTACTED
  INTERESTED
  NEGOTIATION
  MEMBER
  LOST
  INACTIVE
}

enum Pipeline {
  PROSPECT
  QUALIFIED
  PROPOSAL_SENT
  FOLLOW_UP
  CLOSED_WON
  CLOSED_LOST
}

enum ActivityType {
  CREATED
  UPDATED
  STATUS_CHANGED
  NOTE_ADDED
  NOTE_UPDATED
  NOTE_DELETED
  CONTACT_ADDED
  CONTACT_UPDATED
  CONTACT_DELETED
  EMAIL_SENT
  CALL_MADE
  MEETING_SCHEDULED
  TAG_ADDED
  MEMBER_CONVERTED
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
